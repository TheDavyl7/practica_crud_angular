{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, InjectionToken, inject, Injectable, ComponentFactoryResolver, ApplicationRef, SecurityContext, Injector, Inject, signal, Component, ChangeDetectionStrategy, HostBinding, HostListener, makeEnvironmentProviders, NgModule } from '@angular/core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { DOCUMENT, NgIf } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport * as i2 from '@angular/platform-browser';\nconst _c0 = [\"toast-component\", \"\"];\nfunction Toast_button_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function Toast_button_0_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.remove());\n    });\n    i0.ɵɵelementStart(1, \"span\", 6);\n    i0.ɵɵtext(2, \"\\xD7\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction Toast_div_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\"[\", ctx_r1.duplicatesCount + 1, \"]\");\n  }\n}\nfunction Toast_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵtemplate(2, Toast_div_1_ng_container_2_Template, 2, 1, \"ng-container\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.options.titleClass);\n    i0.ɵɵattribute(\"aria-label\", ctx_r1.title);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.title, \" \");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.duplicatesCount);\n  }\n}\nfunction Toast_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 7);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.options.messageClass);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r1.message, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction Toast_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.options.messageClass);\n    i0.ɵɵattribute(\"aria-label\", ctx_r1.message);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.message, \" \");\n  }\n}\nfunction Toast_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"div\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵstyleProp(\"width\", ctx_r1.width() + \"%\");\n  }\n}\nfunction ToastNoAnimation_button_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function ToastNoAnimation_button_0_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.remove());\n    });\n    i0.ɵɵelementStart(1, \"span\", 6);\n    i0.ɵɵtext(2, \"\\xD7\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ToastNoAnimation_div_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\"[\", ctx_r1.duplicatesCount + 1, \"]\");\n  }\n}\nfunction ToastNoAnimation_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵtemplate(2, ToastNoAnimation_div_1_ng_container_2_Template, 2, 1, \"ng-container\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.options.titleClass);\n    i0.ɵɵattribute(\"aria-label\", ctx_r1.title);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.title, \" \");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.duplicatesCount);\n  }\n}\nfunction ToastNoAnimation_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 7);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.options.messageClass);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r1.message, i0.ɵɵsanitizeHtml);\n  }\n}\nfunction ToastNoAnimation_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.options.messageClass);\n    i0.ɵɵattribute(\"aria-label\", ctx_r1.message);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.message, \" \");\n  }\n}\nfunction ToastNoAnimation_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"div\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵstyleProp(\"width\", ctx_r1.width() + \"%\");\n  }\n}\nlet ToastContainerDirective = /*#__PURE__*/(() => {\n  class ToastContainerDirective {\n    el;\n    constructor(el) {\n      this.el = el;\n    }\n    getContainerElement() {\n      return this.el.nativeElement;\n    }\n    static ɵfac = function ToastContainerDirective_Factory(t) {\n      return new (t || ToastContainerDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: ToastContainerDirective,\n      selectors: [[\"\", \"toastContainer\", \"\"]],\n      exportAs: [\"toastContainer\"],\n      standalone: true\n    });\n  }\n  return ToastContainerDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nclass ComponentPortal {\n  _attachedHost;\n  /** The type of the component that will be instantiated for attachment. */\n  component;\n  /**\n   * [Optional] Where the attached component should live in Angular's *logical* component tree.\n   * This is different from where the component *renders*, which is determined by the PortalHost.\n   * The origin necessary when the host is outside of the Angular application context.\n   */\n  viewContainerRef;\n  /** Injector used for the instantiation of the component. */\n  injector;\n  constructor(component, injector) {\n    this.component = component;\n    this.injector = injector;\n  }\n  /** Attach this portal to a host. */\n  attach(host, newestOnTop) {\n    this._attachedHost = host;\n    return host.attach(this, newestOnTop);\n  }\n  /** Detach this portal from its host */\n  detach() {\n    const host = this._attachedHost;\n    if (host) {\n      this._attachedHost = undefined;\n      return host.detach();\n    }\n  }\n  /** Whether this portal is attached to a host. */\n  get isAttached() {\n    return this._attachedHost != null;\n  }\n  /**\n   * Sets the PortalHost reference without performing `attach()`. This is used directly by\n   * the PortalHost when it is performing an `attach()` or `detach()`.\n   */\n  setAttachedHost(host) {\n    this._attachedHost = host;\n  }\n}\n/**\n * Partial implementation of PortalHost that only deals with attaching a\n * ComponentPortal\n */\nclass BasePortalHost {\n  /** The portal currently attached to the host. */\n  _attachedPortal;\n  /** A function that will permanently dispose this host. */\n  _disposeFn;\n  attach(portal, newestOnTop) {\n    this._attachedPortal = portal;\n    return this.attachComponentPortal(portal, newestOnTop);\n  }\n  detach() {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost();\n    }\n    this._attachedPortal = undefined;\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = undefined;\n    }\n  }\n  setDisposeFn(fn) {\n    this._disposeFn = fn;\n  }\n}\n\n/**\n * Reference to a toast opened via the Toastr service.\n */\nclass ToastRef {\n  _overlayRef;\n  /** The instance of component opened into the toast. */\n  componentInstance;\n  /** Count of duplicates of this toast */\n  duplicatesCount = 0;\n  /** Subject for notifying the user that the toast has finished closing. */\n  _afterClosed = new Subject();\n  /** triggered when toast is activated */\n  _activate = new Subject();\n  /** notifies the toast that it should close before the timeout */\n  _manualClose = new Subject();\n  /** notifies the toast that it should reset the timeouts */\n  _resetTimeout = new Subject();\n  /** notifies the toast that it should count a duplicate toast */\n  _countDuplicate = new Subject();\n  constructor(_overlayRef) {\n    this._overlayRef = _overlayRef;\n  }\n  manualClose() {\n    this._manualClose.next();\n    this._manualClose.complete();\n  }\n  manualClosed() {\n    return this._manualClose.asObservable();\n  }\n  timeoutReset() {\n    return this._resetTimeout.asObservable();\n  }\n  countDuplicate() {\n    return this._countDuplicate.asObservable();\n  }\n  /**\n   * Close the toast.\n   */\n  close() {\n    this._overlayRef.detach();\n    this._afterClosed.next();\n    this._manualClose.next();\n    this._afterClosed.complete();\n    this._manualClose.complete();\n    this._activate.complete();\n    this._resetTimeout.complete();\n    this._countDuplicate.complete();\n  }\n  /** Gets an observable that is notified when the toast is finished closing. */\n  afterClosed() {\n    return this._afterClosed.asObservable();\n  }\n  isInactive() {\n    return this._activate.isStopped;\n  }\n  activate() {\n    this._activate.next();\n    this._activate.complete();\n  }\n  /** Gets an observable that is notified when the toast has started opening. */\n  afterActivate() {\n    return this._activate.asObservable();\n  }\n  /** Reset the toast timouts and count duplicates */\n  onDuplicate(resetTimeout, countDuplicate) {\n    if (resetTimeout) {\n      this._resetTimeout.next();\n    }\n    if (countDuplicate) {\n      this._countDuplicate.next(++this.duplicatesCount);\n    }\n  }\n}\n\n/**\n * Everything a toast needs to launch\n */\nclass ToastPackage {\n  toastId;\n  config;\n  message;\n  title;\n  toastType;\n  toastRef;\n  _onTap = new Subject();\n  _onAction = new Subject();\n  constructor(toastId, config, message, title, toastType, toastRef) {\n    this.toastId = toastId;\n    this.config = config;\n    this.message = message;\n    this.title = title;\n    this.toastType = toastType;\n    this.toastRef = toastRef;\n    this.toastRef.afterClosed().subscribe(() => {\n      this._onAction.complete();\n      this._onTap.complete();\n    });\n  }\n  /** Fired on click */\n  triggerTap() {\n    this._onTap.next();\n    if (this.config.tapToDismiss) {\n      this._onTap.complete();\n    }\n  }\n  onTap() {\n    return this._onTap.asObservable();\n  }\n  /** available for use in custom toast */\n  triggerAction(action) {\n    this._onAction.next(action);\n  }\n  onAction() {\n    return this._onAction.asObservable();\n  }\n}\nconst DefaultNoComponentGlobalConfig = {\n  maxOpened: 0,\n  autoDismiss: false,\n  newestOnTop: true,\n  preventDuplicates: false,\n  countDuplicates: false,\n  resetTimeoutOnDuplicate: false,\n  includeTitleDuplicates: false,\n  iconClasses: {\n    error: 'toast-error',\n    info: 'toast-info',\n    success: 'toast-success',\n    warning: 'toast-warning'\n  },\n  // Individual\n  closeButton: false,\n  disableTimeOut: false,\n  timeOut: 5000,\n  extendedTimeOut: 1000,\n  enableHtml: false,\n  progressBar: false,\n  toastClass: 'ngx-toastr',\n  positionClass: 'toast-top-right',\n  titleClass: 'toast-title',\n  messageClass: 'toast-message',\n  easing: 'ease-in',\n  easeTime: 300,\n  tapToDismiss: true,\n  onActivateTick: false,\n  progressAnimation: 'decreasing'\n};\nconst TOAST_CONFIG = new InjectionToken('ToastConfig');\n\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n *\n * This is the only part of the portal core that directly touches the DOM.\n */\nclass DomPortalHost extends BasePortalHost {\n  _hostDomElement;\n  _componentFactoryResolver;\n  _appRef;\n  constructor(_hostDomElement, _componentFactoryResolver, _appRef) {\n    super();\n    this._hostDomElement = _hostDomElement;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._appRef = _appRef;\n  }\n  /**\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n   * @param portal Portal to be attached\n   */\n  attachComponentPortal(portal, newestOnTop) {\n    const componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n    let componentRef;\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the ChangeDetector for that component to the application (which\n    // happens automatically when using a ViewContainer).\n    componentRef = componentFactory.create(portal.injector);\n    // When creating a component outside of a ViewContainer, we need to manually register\n    // its ChangeDetector with the application. This API is unfortunately not yet published\n    // in Angular core. The change detector must also be deregistered when the component\n    // is destroyed to prevent memory leaks.\n    this._appRef.attachView(componentRef.hostView);\n    this.setDisposeFn(() => {\n      this._appRef.detachView(componentRef.hostView);\n      componentRef.destroy();\n    });\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    if (newestOnTop) {\n      this._hostDomElement.insertBefore(this._getComponentRootNode(componentRef), this._hostDomElement.firstChild);\n    } else {\n      this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n    }\n    return componentRef;\n  }\n  /** Gets the root HTMLElement for an instantiated component. */\n  _getComponentRootNode(componentRef) {\n    return componentRef.hostView.rootNodes[0];\n  }\n}\n\n/** Container inside which all toasts will render. */\nlet OverlayContainer = /*#__PURE__*/(() => {\n  class OverlayContainer {\n    _document = inject(DOCUMENT);\n    _containerElement;\n    ngOnDestroy() {\n      if (this._containerElement && this._containerElement.parentNode) {\n        this._containerElement.parentNode.removeChild(this._containerElement);\n      }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n      if (!this._containerElement) {\n        this._createContainer();\n      }\n      return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body\n     * and 'aria-live=\"polite\"'\n     */\n    _createContainer() {\n      const container = this._document.createElement('div');\n      container.classList.add('overlay-container');\n      container.setAttribute('aria-live', 'polite');\n      this._document.body.appendChild(container);\n      this._containerElement = container;\n    }\n    static ɵfac = function OverlayContainer_Factory(t) {\n      return new (t || OverlayContainer)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: OverlayContainer,\n      factory: OverlayContainer.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return OverlayContainer;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n  _portalHost;\n  constructor(_portalHost) {\n    this._portalHost = _portalHost;\n  }\n  attach(portal, newestOnTop = true) {\n    return this._portalHost.attach(portal, newestOnTop);\n  }\n  /**\n   * Detaches an overlay from a portal.\n   * @returns Resolves when the overlay has been detached.\n   */\n  detach() {\n    return this._portalHost.detach();\n  }\n}\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\nlet Overlay = /*#__PURE__*/(() => {\n  class Overlay {\n    _overlayContainer = inject(OverlayContainer);\n    _componentFactoryResolver = inject(ComponentFactoryResolver);\n    _appRef = inject(ApplicationRef);\n    _document = inject(DOCUMENT);\n    // Namespace panes by overlay container\n    _paneElements = new Map();\n    /**\n     * Creates an overlay.\n     * @returns A reference to the created overlay.\n     */\n    create(positionClass, overlayContainer) {\n      // get existing pane if possible\n      return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\n    }\n    getPaneElement(positionClass = '', overlayContainer) {\n      if (!this._paneElements.get(overlayContainer)) {\n        this._paneElements.set(overlayContainer, {});\n      }\n      if (!this._paneElements.get(overlayContainer)[positionClass]) {\n        this._paneElements.get(overlayContainer)[positionClass] = this._createPaneElement(positionClass, overlayContainer);\n      }\n      return this._paneElements.get(overlayContainer)[positionClass];\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(positionClass, overlayContainer) {\n      const pane = this._document.createElement('div');\n      pane.id = 'toast-container';\n      pane.classList.add(positionClass);\n      pane.classList.add('toast-container');\n      if (!overlayContainer) {\n        this._overlayContainer.getContainerElement().appendChild(pane);\n      } else {\n        overlayContainer.getContainerElement().appendChild(pane);\n      }\n      return pane;\n    }\n    /**\n     * Create a DomPortalHost into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal host.\n     * @returns A portal host for the given DOM element.\n     */\n    _createPortalHost(pane) {\n      return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\n    }\n    /**\n     * Creates an OverlayRef for an overlay in the given DOM element.\n     * @param pane DOM element for the overlay\n     */\n    _createOverlayRef(pane) {\n      return new OverlayRef(this._createPortalHost(pane));\n    }\n    static ɵfac = function Overlay_Factory(t) {\n      return new (t || Overlay)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: Overlay,\n      factory: Overlay.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return Overlay;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ToastrService = /*#__PURE__*/(() => {\n  class ToastrService {\n    overlay;\n    _injector;\n    sanitizer;\n    ngZone;\n    toastrConfig;\n    currentlyActive = 0;\n    toasts = [];\n    overlayContainer;\n    previousToastMessage;\n    index = 0;\n    constructor(token, overlay, _injector, sanitizer, ngZone) {\n      this.overlay = overlay;\n      this._injector = _injector;\n      this.sanitizer = sanitizer;\n      this.ngZone = ngZone;\n      this.toastrConfig = {\n        ...token.default,\n        ...token.config\n      };\n      if (token.config.iconClasses) {\n        this.toastrConfig.iconClasses = {\n          ...token.default.iconClasses,\n          ...token.config.iconClasses\n        };\n      }\n    }\n    /** show toast */\n    show(message, title, override = {}, type = '') {\n      return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show successful toast */\n    success(message, title, override = {}) {\n      const type = this.toastrConfig.iconClasses.success || '';\n      return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show error toast */\n    error(message, title, override = {}) {\n      const type = this.toastrConfig.iconClasses.error || '';\n      return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show info toast */\n    info(message, title, override = {}) {\n      const type = this.toastrConfig.iconClasses.info || '';\n      return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show warning toast */\n    warning(message, title, override = {}) {\n      const type = this.toastrConfig.iconClasses.warning || '';\n      return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /**\n     * Remove all or a single toast by id\n     */\n    clear(toastId) {\n      // Call every toastRef manualClose function\n      for (const toast of this.toasts) {\n        if (toastId !== undefined) {\n          if (toast.toastId === toastId) {\n            toast.toastRef.manualClose();\n            return;\n          }\n        } else {\n          toast.toastRef.manualClose();\n        }\n      }\n    }\n    /**\n     * Remove and destroy a single toast by id\n     */\n    remove(toastId) {\n      const found = this._findToast(toastId);\n      if (!found) {\n        return false;\n      }\n      found.activeToast.toastRef.close();\n      this.toasts.splice(found.index, 1);\n      this.currentlyActive = this.currentlyActive - 1;\n      if (!this.toastrConfig.maxOpened || !this.toasts.length) {\n        return false;\n      }\n      if (this.currentlyActive < this.toastrConfig.maxOpened && this.toasts[this.currentlyActive]) {\n        const p = this.toasts[this.currentlyActive].toastRef;\n        if (!p.isInactive()) {\n          this.currentlyActive = this.currentlyActive + 1;\n          p.activate();\n        }\n      }\n      return true;\n    }\n    /**\n     * Determines if toast message is already shown\n     */\n    findDuplicate(title = '', message = '', resetOnDuplicate, countDuplicates) {\n      const {\n        includeTitleDuplicates\n      } = this.toastrConfig;\n      for (const toast of this.toasts) {\n        const hasDuplicateTitle = includeTitleDuplicates && toast.title === title;\n        if ((!includeTitleDuplicates || hasDuplicateTitle) && toast.message === message) {\n          toast.toastRef.onDuplicate(resetOnDuplicate, countDuplicates);\n          return toast;\n        }\n      }\n      return null;\n    }\n    /** create a clone of global config and apply individual settings */\n    applyConfig(override = {}) {\n      return {\n        ...this.toastrConfig,\n        ...override\n      };\n    }\n    /**\n     * Find toast object by id\n     */\n    _findToast(toastId) {\n      for (let i = 0; i < this.toasts.length; i++) {\n        if (this.toasts[i].toastId === toastId) {\n          return {\n            index: i,\n            activeToast: this.toasts[i]\n          };\n        }\n      }\n      return null;\n    }\n    /**\n     * Determines the need to run inside angular's zone then builds the toast\n     */\n    _preBuildNotification(toastType, message, title, config) {\n      if (config.onActivateTick) {\n        return this.ngZone.run(() => this._buildNotification(toastType, message, title, config));\n      }\n      return this._buildNotification(toastType, message, title, config);\n    }\n    /**\n     * Creates and attaches toast data to component\n     * returns the active toast, or in case preventDuplicates is enabled the original/non-duplicate active toast.\n     */\n    _buildNotification(toastType, message, title, config) {\n      if (!config.toastComponent) {\n        throw new Error('toastComponent required');\n      }\n      // max opened and auto dismiss = true\n      // if timeout = 0 resetting it would result in setting this.hideTime = Date.now(). Hence, we only want to reset timeout if there is\n      // a timeout at all\n      const duplicate = this.findDuplicate(title, message, this.toastrConfig.resetTimeoutOnDuplicate && config.timeOut > 0, this.toastrConfig.countDuplicates);\n      if ((this.toastrConfig.includeTitleDuplicates && title || message) && this.toastrConfig.preventDuplicates && duplicate !== null) {\n        return duplicate;\n      }\n      this.previousToastMessage = message;\n      let keepInactive = false;\n      if (this.toastrConfig.maxOpened && this.currentlyActive >= this.toastrConfig.maxOpened) {\n        keepInactive = true;\n        if (this.toastrConfig.autoDismiss) {\n          this.clear(this.toasts[0].toastId);\n        }\n      }\n      const overlayRef = this.overlay.create(config.positionClass, this.overlayContainer);\n      this.index = this.index + 1;\n      let sanitizedMessage = message;\n      if (message && config.enableHtml) {\n        sanitizedMessage = this.sanitizer.sanitize(SecurityContext.HTML, message);\n      }\n      const toastRef = new ToastRef(overlayRef);\n      const toastPackage = new ToastPackage(this.index, config, sanitizedMessage, title, toastType, toastRef);\n      /** New injector that contains an instance of `ToastPackage`. */\n      const providers = [{\n        provide: ToastPackage,\n        useValue: toastPackage\n      }];\n      const toastInjector = Injector.create({\n        providers,\n        parent: this._injector\n      });\n      const component = new ComponentPortal(config.toastComponent, toastInjector);\n      const portal = overlayRef.attach(component, config.newestOnTop);\n      toastRef.componentInstance = portal.instance;\n      const ins = {\n        toastId: this.index,\n        title: title || '',\n        message: message || '',\n        toastRef,\n        onShown: toastRef.afterActivate(),\n        onHidden: toastRef.afterClosed(),\n        onTap: toastPackage.onTap(),\n        onAction: toastPackage.onAction(),\n        portal\n      };\n      if (!keepInactive) {\n        this.currentlyActive = this.currentlyActive + 1;\n        setTimeout(() => {\n          ins.toastRef.activate();\n        });\n      }\n      this.toasts.push(ins);\n      return ins;\n    }\n    static ɵfac = function ToastrService_Factory(t) {\n      return new (t || ToastrService)(i0.ɵɵinject(TOAST_CONFIG), i0.ɵɵinject(Overlay), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i2.DomSanitizer), i0.ɵɵinject(i0.NgZone));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: ToastrService,\n      factory: ToastrService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ToastrService;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet Toast = /*#__PURE__*/(() => {\n  class Toast {\n    toastrService;\n    toastPackage;\n    ngZone;\n    message;\n    title;\n    options;\n    duplicatesCount;\n    originalTimeout;\n    /** width of progress bar */\n    width = signal(-1);\n    /** a combination of toast type and options.toastClass */\n    toastClasses = '';\n    state;\n    /** controls animation */\n    get _state() {\n      return this.state();\n    }\n    /** hides component when waiting to be displayed */\n    get displayStyle() {\n      if (this.state().value === 'inactive') {\n        return 'none';\n      }\n      return;\n    }\n    timeout;\n    intervalId;\n    hideTime;\n    sub;\n    sub1;\n    sub2;\n    sub3;\n    constructor(toastrService, toastPackage, ngZone) {\n      this.toastrService = toastrService;\n      this.toastPackage = toastPackage;\n      this.ngZone = ngZone;\n      this.message = toastPackage.message;\n      this.title = toastPackage.title;\n      this.options = toastPackage.config;\n      this.originalTimeout = toastPackage.config.timeOut;\n      this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n      this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n        this.activateToast();\n      });\n      this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n        this.remove();\n      });\n      this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n        this.resetTimeout();\n      });\n      this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n        this.duplicatesCount = count;\n      });\n      this.state = signal({\n        value: 'inactive',\n        params: {\n          easeTime: this.toastPackage.config.easeTime,\n          easing: 'ease-in'\n        }\n      });\n    }\n    ngOnDestroy() {\n      this.sub.unsubscribe();\n      this.sub1.unsubscribe();\n      this.sub2.unsubscribe();\n      this.sub3.unsubscribe();\n      clearInterval(this.intervalId);\n      clearTimeout(this.timeout);\n    }\n    /**\n     * activates toast and sets timeout\n     */\n    activateToast() {\n      this.state.update(state => ({\n        ...state,\n        value: 'active'\n      }));\n      if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n        this.outsideTimeout(() => this.remove(), this.options.timeOut);\n        this.hideTime = new Date().getTime() + this.options.timeOut;\n        if (this.options.progressBar) {\n          this.outsideInterval(() => this.updateProgress(), 10);\n        }\n      }\n    }\n    /**\n     * updates progress bar width\n     */\n    updateProgress() {\n      if (this.width() === 0 || this.width() === 100 || !this.options.timeOut) {\n        return;\n      }\n      const now = new Date().getTime();\n      const remaining = this.hideTime - now;\n      this.width.set(remaining / this.options.timeOut * 100);\n      if (this.options.progressAnimation === 'increasing') {\n        this.width.update(width => 100 - width);\n      }\n      if (this.width() <= 0) {\n        this.width.set(0);\n      }\n      if (this.width() >= 100) {\n        this.width.set(100);\n      }\n    }\n    resetTimeout() {\n      clearTimeout(this.timeout);\n      clearInterval(this.intervalId);\n      this.state.update(state => ({\n        ...state,\n        value: 'active'\n      }));\n      this.outsideTimeout(() => this.remove(), this.originalTimeout);\n      this.options.timeOut = this.originalTimeout;\n      this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n      this.width.set(-1);\n      if (this.options.progressBar) {\n        this.outsideInterval(() => this.updateProgress(), 10);\n      }\n    }\n    /**\n     * tells toastrService to remove this toast after animation time\n     */\n    remove() {\n      if (this.state().value === 'removed') {\n        return;\n      }\n      clearTimeout(this.timeout);\n      this.state.update(state => ({\n        ...state,\n        value: 'removed'\n      }));\n      this.outsideTimeout(() => this.toastrService.remove(this.toastPackage.toastId), +this.toastPackage.config.easeTime);\n    }\n    tapToast() {\n      if (this.state().value === 'removed') {\n        return;\n      }\n      this.toastPackage.triggerTap();\n      if (this.options.tapToDismiss) {\n        this.remove();\n      }\n    }\n    stickAround() {\n      if (this.state().value === 'removed') {\n        return;\n      }\n      if (this.options.disableTimeOut !== 'extendedTimeOut') {\n        clearTimeout(this.timeout);\n        this.options.timeOut = 0;\n        this.hideTime = 0;\n        // disable progressBar\n        clearInterval(this.intervalId);\n        this.width.set(0);\n      }\n    }\n    delayedHideToast() {\n      if (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut' || this.options.extendedTimeOut === 0 || this.state().value === 'removed') {\n        return;\n      }\n      this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);\n      this.options.timeOut = this.options.extendedTimeOut;\n      this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n      this.width.set(-1);\n      if (this.options.progressBar) {\n        this.outsideInterval(() => this.updateProgress(), 10);\n      }\n    }\n    outsideTimeout(func, timeout) {\n      if (this.ngZone) {\n        this.ngZone.runOutsideAngular(() => this.timeout = setTimeout(() => this.runInsideAngular(func), timeout));\n      } else {\n        this.timeout = setTimeout(() => func(), timeout);\n      }\n    }\n    outsideInterval(func, timeout) {\n      if (this.ngZone) {\n        this.ngZone.runOutsideAngular(() => this.intervalId = setInterval(() => this.runInsideAngular(func), timeout));\n      } else {\n        this.intervalId = setInterval(() => func(), timeout);\n      }\n    }\n    runInsideAngular(func) {\n      if (this.ngZone) {\n        this.ngZone.run(() => func());\n      } else {\n        func();\n      }\n    }\n    static ɵfac = function Toast_Factory(t) {\n      return new (t || Toast)(i0.ɵɵdirectiveInject(ToastrService), i0.ɵɵdirectiveInject(ToastPackage), i0.ɵɵdirectiveInject(i0.NgZone));\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: Toast,\n      selectors: [[\"\", \"toast-component\", \"\"]],\n      hostVars: 5,\n      hostBindings: function Toast_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"click\", function Toast_click_HostBindingHandler() {\n            return ctx.tapToast();\n          })(\"mouseenter\", function Toast_mouseenter_HostBindingHandler() {\n            return ctx.stickAround();\n          })(\"mouseleave\", function Toast_mouseleave_HostBindingHandler() {\n            return ctx.delayedHideToast();\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵsyntheticHostProperty(\"@flyInOut\", ctx._state);\n          i0.ɵɵclassMap(ctx.toastClasses);\n          i0.ɵɵstyleProp(\"display\", ctx.displayStyle);\n        }\n      },\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      attrs: _c0,\n      decls: 5,\n      vars: 5,\n      consts: [[\"type\", \"button\", \"class\", \"toast-close-button\", \"aria-label\", \"Close\", 3, \"click\", 4, \"ngIf\"], [3, \"class\", 4, \"ngIf\"], [\"role\", \"alert\", 3, \"class\", \"innerHTML\", 4, \"ngIf\"], [\"role\", \"alert\", 3, \"class\", 4, \"ngIf\"], [4, \"ngIf\"], [\"type\", \"button\", \"aria-label\", \"Close\", 1, \"toast-close-button\", 3, \"click\"], [\"aria-hidden\", \"true\"], [\"role\", \"alert\", 3, \"innerHTML\"], [\"role\", \"alert\"], [1, \"toast-progress\"]],\n      template: function Toast_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, Toast_button_0_Template, 3, 0, \"button\", 0)(1, Toast_div_1_Template, 3, 5, \"div\", 1)(2, Toast_div_2_Template, 1, 3, \"div\", 2)(3, Toast_div_3_Template, 2, 4, \"div\", 3)(4, Toast_div_4_Template, 2, 2, \"div\", 4);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngIf\", ctx.options.closeButton);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.title);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.message && ctx.options.enableHtml);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.message && !ctx.options.enableHtml);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.options.progressBar);\n        }\n      },\n      dependencies: [NgIf],\n      encapsulation: 2,\n      data: {\n        animation: [trigger('flyInOut', [state('inactive', style({\n          opacity: 0\n        })), state('active', style({\n          opacity: 1\n        })), state('removed', style({\n          opacity: 0\n        })), transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')), transition('active => removed', animate('{{ easeTime }}ms {{ easing }}'))])]\n      },\n      changeDetection: 0\n    });\n  }\n  return Toast;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst DefaultGlobalConfig = {\n  ...DefaultNoComponentGlobalConfig,\n  toastComponent: Toast\n};\n/**\n * @description\n * Provides the `TOAST_CONFIG` token with the given config.\n *\n * @param config The config to configure toastr.\n * @returns The environment providers.\n *\n * @example\n * ```ts\n * import { provideToastr } from 'ngx-toastr';\n *\n * bootstrap(AppComponent, {\n *   providers: [\n *     provideToastr({\n *       timeOut: 2000,\n *       positionClass: 'toast-top-right',\n *     }),\n *   ],\n * })\n */\nconst provideToastr = (config = {}) => {\n  const providers = [{\n    provide: TOAST_CONFIG,\n    useValue: {\n      default: DefaultGlobalConfig,\n      config\n    }\n  }];\n  return makeEnvironmentProviders(providers);\n};\nlet ToastrModule = /*#__PURE__*/(() => {\n  class ToastrModule {\n    static forRoot(config = {}) {\n      return {\n        ngModule: ToastrModule,\n        providers: [provideToastr(config)]\n      };\n    }\n    static ɵfac = function ToastrModule_Factory(t) {\n      return new (t || ToastrModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: ToastrModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n  return ToastrModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ToastrComponentlessModule = /*#__PURE__*/(() => {\n  class ToastrComponentlessModule {\n    static forRoot(config = {}) {\n      return {\n        ngModule: ToastrModule,\n        providers: [{\n          provide: TOAST_CONFIG,\n          useValue: {\n            default: DefaultNoComponentGlobalConfig,\n            config\n          }\n        }]\n      };\n    }\n    static ɵfac = function ToastrComponentlessModule_Factory(t) {\n      return new (t || ToastrComponentlessModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: ToastrComponentlessModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n  return ToastrComponentlessModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ToastNoAnimation = /*#__PURE__*/(() => {\n  class ToastNoAnimation {\n    toastrService;\n    toastPackage;\n    appRef;\n    message;\n    title;\n    options;\n    duplicatesCount;\n    originalTimeout;\n    /** width of progress bar */\n    width = signal(-1);\n    /** a combination of toast type and options.toastClass */\n    toastClasses = '';\n    /** hides component when waiting to be displayed */\n    get displayStyle() {\n      if (this.state() === 'inactive') {\n        return 'none';\n      }\n      return null;\n    }\n    /** controls animation */\n    state = signal('inactive');\n    timeout;\n    intervalId;\n    hideTime;\n    sub;\n    sub1;\n    sub2;\n    sub3;\n    constructor(toastrService, toastPackage, appRef) {\n      this.toastrService = toastrService;\n      this.toastPackage = toastPackage;\n      this.appRef = appRef;\n      this.message = toastPackage.message;\n      this.title = toastPackage.title;\n      this.options = toastPackage.config;\n      this.originalTimeout = toastPackage.config.timeOut;\n      this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n      this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n        this.activateToast();\n      });\n      this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n        this.remove();\n      });\n      this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n        this.resetTimeout();\n      });\n      this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n        this.duplicatesCount = count;\n      });\n    }\n    ngOnDestroy() {\n      this.sub.unsubscribe();\n      this.sub1.unsubscribe();\n      this.sub2.unsubscribe();\n      this.sub3.unsubscribe();\n      clearInterval(this.intervalId);\n      clearTimeout(this.timeout);\n    }\n    /**\n     * activates toast and sets timeout\n     */\n    activateToast() {\n      this.state.set('active');\n      if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n        this.timeout = setTimeout(() => {\n          this.remove();\n        }, this.options.timeOut);\n        this.hideTime = new Date().getTime() + this.options.timeOut;\n        if (this.options.progressBar) {\n          this.intervalId = setInterval(() => this.updateProgress(), 10);\n        }\n      }\n      if (this.options.onActivateTick) {\n        this.appRef.tick();\n      }\n    }\n    /**\n     * updates progress bar width\n     */\n    updateProgress() {\n      if (this.width() === 0 || this.width() === 100 || !this.options.timeOut) {\n        return;\n      }\n      const now = new Date().getTime();\n      const remaining = this.hideTime - now;\n      this.width.set(remaining / this.options.timeOut * 100);\n      if (this.options.progressAnimation === 'increasing') {\n        this.width.update(width => 100 - width);\n      }\n      if (this.width() <= 0) {\n        this.width.set(0);\n      }\n      if (this.width() >= 100) {\n        this.width.set(100);\n      }\n    }\n    resetTimeout() {\n      clearTimeout(this.timeout);\n      clearInterval(this.intervalId);\n      this.state.set('active');\n      this.options.timeOut = this.originalTimeout;\n      this.timeout = setTimeout(() => this.remove(), this.originalTimeout);\n      this.hideTime = new Date().getTime() + (this.originalTimeout || 0);\n      this.width.set(-1);\n      if (this.options.progressBar) {\n        this.intervalId = setInterval(() => this.updateProgress(), 10);\n      }\n    }\n    /**\n     * tells toastrService to remove this toast after animation time\n     */\n    remove() {\n      if (this.state() === 'removed') {\n        return;\n      }\n      clearTimeout(this.timeout);\n      this.state.set('removed');\n      this.timeout = setTimeout(() => this.toastrService.remove(this.toastPackage.toastId));\n    }\n    tapToast() {\n      if (this.state() === 'removed') {\n        return;\n      }\n      this.toastPackage.triggerTap();\n      if (this.options.tapToDismiss) {\n        this.remove();\n      }\n    }\n    stickAround() {\n      if (this.state() === 'removed') {\n        return;\n      }\n      clearTimeout(this.timeout);\n      this.options.timeOut = 0;\n      this.hideTime = 0;\n      // disable progressBar\n      clearInterval(this.intervalId);\n      this.width.set(0);\n    }\n    delayedHideToast() {\n      if (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut' || this.options.extendedTimeOut === 0 || this.state() === 'removed') {\n        return;\n      }\n      this.timeout = setTimeout(() => this.remove(), this.options.extendedTimeOut);\n      this.options.timeOut = this.options.extendedTimeOut;\n      this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n      this.width.set(-1);\n      if (this.options.progressBar) {\n        this.intervalId = setInterval(() => this.updateProgress(), 10);\n      }\n    }\n    static ɵfac = function ToastNoAnimation_Factory(t) {\n      return new (t || ToastNoAnimation)(i0.ɵɵdirectiveInject(ToastrService), i0.ɵɵdirectiveInject(ToastPackage), i0.ɵɵdirectiveInject(i0.ApplicationRef));\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: ToastNoAnimation,\n      selectors: [[\"\", \"toast-component\", \"\"]],\n      hostVars: 4,\n      hostBindings: function ToastNoAnimation_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"click\", function ToastNoAnimation_click_HostBindingHandler() {\n            return ctx.tapToast();\n          })(\"mouseenter\", function ToastNoAnimation_mouseenter_HostBindingHandler() {\n            return ctx.stickAround();\n          })(\"mouseleave\", function ToastNoAnimation_mouseleave_HostBindingHandler() {\n            return ctx.delayedHideToast();\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵclassMap(ctx.toastClasses);\n          i0.ɵɵstyleProp(\"display\", ctx.displayStyle);\n        }\n      },\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      attrs: _c0,\n      decls: 5,\n      vars: 5,\n      consts: [[\"type\", \"button\", \"class\", \"toast-close-button\", \"aria-label\", \"Close\", 3, \"click\", 4, \"ngIf\"], [3, \"class\", 4, \"ngIf\"], [\"role\", \"alert\", 3, \"class\", \"innerHTML\", 4, \"ngIf\"], [\"role\", \"alert\", 3, \"class\", 4, \"ngIf\"], [4, \"ngIf\"], [\"type\", \"button\", \"aria-label\", \"Close\", 1, \"toast-close-button\", 3, \"click\"], [\"aria-hidden\", \"true\"], [\"role\", \"alert\", 3, \"innerHTML\"], [\"role\", \"alert\"], [1, \"toast-progress\"]],\n      template: function ToastNoAnimation_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, ToastNoAnimation_button_0_Template, 3, 0, \"button\", 0)(1, ToastNoAnimation_div_1_Template, 3, 5, \"div\", 1)(2, ToastNoAnimation_div_2_Template, 1, 3, \"div\", 2)(3, ToastNoAnimation_div_3_Template, 2, 4, \"div\", 3)(4, ToastNoAnimation_div_4_Template, 2, 2, \"div\", 4);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngIf\", ctx.options.closeButton);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.title);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.message && ctx.options.enableHtml);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.message && !ctx.options.enableHtml);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.options.progressBar);\n        }\n      },\n      dependencies: [NgIf],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return ToastNoAnimation;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst DefaultNoAnimationsGlobalConfig = {\n  ...DefaultNoComponentGlobalConfig,\n  toastComponent: ToastNoAnimation\n};\nlet ToastNoAnimationModule = /*#__PURE__*/(() => {\n  class ToastNoAnimationModule {\n    static forRoot(config = {}) {\n      return {\n        ngModule: ToastNoAnimationModule,\n        providers: [{\n          provide: TOAST_CONFIG,\n          useValue: {\n            default: DefaultNoAnimationsGlobalConfig,\n            config\n          }\n        }]\n      };\n    }\n    static ɵfac = function ToastNoAnimationModule_Factory(t) {\n      return new (t || ToastNoAnimationModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: ToastNoAnimationModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n  return ToastNoAnimationModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, ComponentPortal, DefaultGlobalConfig, DefaultNoAnimationsGlobalConfig, DefaultNoComponentGlobalConfig, Overlay, OverlayContainer, OverlayRef, TOAST_CONFIG, Toast, ToastContainerDirective, ToastNoAnimation, ToastNoAnimationModule, ToastPackage, ToastRef, ToastrComponentlessModule, ToastrModule, ToastrService, provideToastr };","map":{"version":3,"names":["i0","Directive","InjectionToken","inject","Injectable","ComponentFactoryResolver","ApplicationRef","SecurityContext","Injector","Inject","signal","Component","ChangeDetectionStrategy","HostBinding","HostListener","makeEnvironmentProviders","NgModule","trigger","state","style","transition","animate","DOCUMENT","NgIf","Subject","i2","_c0","Toast_button_0_Template","rf","ctx","_r1","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","Toast_button_0_Template_button_click_0_listener","ɵɵrestoreView","ctx_r1","ɵɵnextContext","ɵɵresetView","remove","ɵɵtext","ɵɵelementEnd","Toast_div_1_ng_container_2_Template","ɵɵelementContainerStart","ɵɵelementContainerEnd","ɵɵadvance","ɵɵtextInterpolate1","duplicatesCount","Toast_div_1_Template","ɵɵtemplate","ɵɵclassMap","options","titleClass","ɵɵattribute","title","ɵɵproperty","Toast_div_2_Template","ɵɵelement","messageClass","message","ɵɵsanitizeHtml","Toast_div_3_Template","Toast_div_4_Template","ɵɵstyleProp","width","ToastNoAnimation_button_0_Template","ToastNoAnimation_button_0_Template_button_click_0_listener","ToastNoAnimation_div_1_ng_container_2_Template","ToastNoAnimation_div_1_Template","ToastNoAnimation_div_2_Template","ToastNoAnimation_div_3_Template","ToastNoAnimation_div_4_Template","ToastContainerDirective","el","constructor","getContainerElement","nativeElement","ɵfac","ToastContainerDirective_Factory","t","ɵɵdirectiveInject","ElementRef","ɵdir","ɵɵdefineDirective","type","selectors","exportAs","standalone","ngDevMode","ComponentPortal","_attachedHost","component","viewContainerRef","injector","attach","host","newestOnTop","detach","undefined","isAttached","setAttachedHost","BasePortalHost","_attachedPortal","_disposeFn","portal","attachComponentPortal","setDisposeFn","fn","ToastRef","_overlayRef","componentInstance","_afterClosed","_activate","_manualClose","_resetTimeout","_countDuplicate","manualClose","next","complete","manualClosed","asObservable","timeoutReset","countDuplicate","close","afterClosed","isInactive","isStopped","activate","afterActivate","onDuplicate","resetTimeout","ToastPackage","toastId","config","toastType","toastRef","_onTap","_onAction","subscribe","triggerTap","tapToDismiss","onTap","triggerAction","action","onAction","DefaultNoComponentGlobalConfig","maxOpened","autoDismiss","preventDuplicates","countDuplicates","resetTimeoutOnDuplicate","includeTitleDuplicates","iconClasses","error","info","success","warning","closeButton","disableTimeOut","timeOut","extendedTimeOut","enableHtml","progressBar","toastClass","positionClass","easing","easeTime","onActivateTick","progressAnimation","TOAST_CONFIG","DomPortalHost","_hostDomElement","_componentFactoryResolver","_appRef","componentFactory","resolveComponentFactory","componentRef","create","attachView","hostView","detachView","destroy","insertBefore","_getComponentRootNode","firstChild","appendChild","rootNodes","OverlayContainer","_document","_containerElement","ngOnDestroy","parentNode","removeChild","_createContainer","container","createElement","classList","add","setAttribute","body","OverlayContainer_Factory","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","OverlayRef","_portalHost","Overlay","_overlayContainer","_paneElements","Map","overlayContainer","_createOverlayRef","getPaneElement","get","set","_createPaneElement","pane","id","_createPortalHost","Overlay_Factory","ToastrService","overlay","_injector","sanitizer","ngZone","toastrConfig","currentlyActive","toasts","previousToastMessage","index","default","show","override","_preBuildNotification","applyConfig","clear","toast","found","_findToast","activeToast","splice","length","p","findDuplicate","resetOnDuplicate","hasDuplicateTitle","i","run","_buildNotification","toastComponent","Error","duplicate","keepInactive","overlayRef","sanitizedMessage","sanitize","HTML","toastPackage","providers","provide","useValue","toastInjector","parent","instance","ins","onShown","onHidden","setTimeout","push","ToastrService_Factory","ɵɵinject","DomSanitizer","NgZone","Toast","toastrService","originalTimeout","toastClasses","_state","displayStyle","value","timeout","intervalId","hideTime","sub","sub1","sub2","sub3","activateToast","count","params","unsubscribe","clearInterval","clearTimeout","update","outsideTimeout","Date","getTime","outsideInterval","updateProgress","now","remaining","tapToast","stickAround","delayedHideToast","func","runOutsideAngular","runInsideAngular","setInterval","Toast_Factory","ɵcmp","ɵɵdefineComponent","hostVars","hostBindings","Toast_HostBindings","Toast_click_HostBindingHandler","Toast_mouseenter_HostBindingHandler","Toast_mouseleave_HostBindingHandler","ɵɵsyntheticHostProperty","features","ɵɵStandaloneFeature","attrs","decls","vars","consts","template","Toast_Template","dependencies","encapsulation","data","animation","opacity","changeDetection","DefaultGlobalConfig","provideToastr","ToastrModule","forRoot","ngModule","ToastrModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","ToastrComponentlessModule","ToastrComponentlessModule_Factory","ToastNoAnimation","appRef","tick","ToastNoAnimation_Factory","ToastNoAnimation_HostBindings","ToastNoAnimation_click_HostBindingHandler","ToastNoAnimation_mouseenter_HostBindingHandler","ToastNoAnimation_mouseleave_HostBindingHandler","ToastNoAnimation_Template","DefaultNoAnimationsGlobalConfig","ToastNoAnimationModule","ToastNoAnimationModule_Factory"],"sources":["C:/Users/david.estebanell/Documents/typescript/tutorial/proyecto_almacen/practica_almacen/node_modules/ngx-toastr/fesm2022/ngx-toastr.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, InjectionToken, inject, Injectable, ComponentFactoryResolver, ApplicationRef, SecurityContext, Injector, Inject, signal, Component, ChangeDetectionStrategy, HostBinding, HostListener, makeEnvironmentProviders, NgModule } from '@angular/core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { DOCUMENT, NgIf } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport * as i2 from '@angular/platform-browser';\n\nclass ToastContainerDirective {\n    el;\n    constructor(el) {\n        this.el = el;\n    }\n    getContainerElement() {\n        return this.el.nativeElement;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastContainerDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.0.0\", type: ToastContainerDirective, isStandalone: true, selector: \"[toastContainer]\", exportAs: [\"toastContainer\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastContainerDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[toastContainer]',\n                    exportAs: 'toastContainer',\n                    standalone: true\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }] });\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nclass ComponentPortal {\n    _attachedHost;\n    /** The type of the component that will be instantiated for attachment. */\n    component;\n    /**\n     * [Optional] Where the attached component should live in Angular's *logical* component tree.\n     * This is different from where the component *renders*, which is determined by the PortalHost.\n     * The origin necessary when the host is outside of the Angular application context.\n     */\n    viewContainerRef;\n    /** Injector used for the instantiation of the component. */\n    injector;\n    constructor(component, injector) {\n        this.component = component;\n        this.injector = injector;\n    }\n    /** Attach this portal to a host. */\n    attach(host, newestOnTop) {\n        this._attachedHost = host;\n        return host.attach(this, newestOnTop);\n    }\n    /** Detach this portal from its host */\n    detach() {\n        const host = this._attachedHost;\n        if (host) {\n            this._attachedHost = undefined;\n            return host.detach();\n        }\n    }\n    /** Whether this portal is attached to a host. */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalHost reference without performing `attach()`. This is used directly by\n     * the PortalHost when it is performing an `attach()` or `detach()`.\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * Partial implementation of PortalHost that only deals with attaching a\n * ComponentPortal\n */\nclass BasePortalHost {\n    /** The portal currently attached to the host. */\n    _attachedPortal;\n    /** A function that will permanently dispose this host. */\n    _disposeFn;\n    attach(portal, newestOnTop) {\n        this._attachedPortal = portal;\n        return this.attachComponentPortal(portal, newestOnTop);\n    }\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost();\n        }\n        this._attachedPortal = undefined;\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = undefined;\n        }\n    }\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n}\n\n/**\n * Reference to a toast opened via the Toastr service.\n */\nclass ToastRef {\n    _overlayRef;\n    /** The instance of component opened into the toast. */\n    componentInstance;\n    /** Count of duplicates of this toast */\n    duplicatesCount = 0;\n    /** Subject for notifying the user that the toast has finished closing. */\n    _afterClosed = new Subject();\n    /** triggered when toast is activated */\n    _activate = new Subject();\n    /** notifies the toast that it should close before the timeout */\n    _manualClose = new Subject();\n    /** notifies the toast that it should reset the timeouts */\n    _resetTimeout = new Subject();\n    /** notifies the toast that it should count a duplicate toast */\n    _countDuplicate = new Subject();\n    constructor(_overlayRef) {\n        this._overlayRef = _overlayRef;\n    }\n    manualClose() {\n        this._manualClose.next();\n        this._manualClose.complete();\n    }\n    manualClosed() {\n        return this._manualClose.asObservable();\n    }\n    timeoutReset() {\n        return this._resetTimeout.asObservable();\n    }\n    countDuplicate() {\n        return this._countDuplicate.asObservable();\n    }\n    /**\n     * Close the toast.\n     */\n    close() {\n        this._overlayRef.detach();\n        this._afterClosed.next();\n        this._manualClose.next();\n        this._afterClosed.complete();\n        this._manualClose.complete();\n        this._activate.complete();\n        this._resetTimeout.complete();\n        this._countDuplicate.complete();\n    }\n    /** Gets an observable that is notified when the toast is finished closing. */\n    afterClosed() {\n        return this._afterClosed.asObservable();\n    }\n    isInactive() {\n        return this._activate.isStopped;\n    }\n    activate() {\n        this._activate.next();\n        this._activate.complete();\n    }\n    /** Gets an observable that is notified when the toast has started opening. */\n    afterActivate() {\n        return this._activate.asObservable();\n    }\n    /** Reset the toast timouts and count duplicates */\n    onDuplicate(resetTimeout, countDuplicate) {\n        if (resetTimeout) {\n            this._resetTimeout.next();\n        }\n        if (countDuplicate) {\n            this._countDuplicate.next(++this.duplicatesCount);\n        }\n    }\n}\n\n/**\n * Everything a toast needs to launch\n */\nclass ToastPackage {\n    toastId;\n    config;\n    message;\n    title;\n    toastType;\n    toastRef;\n    _onTap = new Subject();\n    _onAction = new Subject();\n    constructor(toastId, config, message, title, toastType, toastRef) {\n        this.toastId = toastId;\n        this.config = config;\n        this.message = message;\n        this.title = title;\n        this.toastType = toastType;\n        this.toastRef = toastRef;\n        this.toastRef.afterClosed().subscribe(() => {\n            this._onAction.complete();\n            this._onTap.complete();\n        });\n    }\n    /** Fired on click */\n    triggerTap() {\n        this._onTap.next();\n        if (this.config.tapToDismiss) {\n            this._onTap.complete();\n        }\n    }\n    onTap() {\n        return this._onTap.asObservable();\n    }\n    /** available for use in custom toast */\n    triggerAction(action) {\n        this._onAction.next(action);\n    }\n    onAction() {\n        return this._onAction.asObservable();\n    }\n}\nconst DefaultNoComponentGlobalConfig = {\n    maxOpened: 0,\n    autoDismiss: false,\n    newestOnTop: true,\n    preventDuplicates: false,\n    countDuplicates: false,\n    resetTimeoutOnDuplicate: false,\n    includeTitleDuplicates: false,\n    iconClasses: {\n        error: 'toast-error',\n        info: 'toast-info',\n        success: 'toast-success',\n        warning: 'toast-warning',\n    },\n    // Individual\n    closeButton: false,\n    disableTimeOut: false,\n    timeOut: 5000,\n    extendedTimeOut: 1000,\n    enableHtml: false,\n    progressBar: false,\n    toastClass: 'ngx-toastr',\n    positionClass: 'toast-top-right',\n    titleClass: 'toast-title',\n    messageClass: 'toast-message',\n    easing: 'ease-in',\n    easeTime: 300,\n    tapToDismiss: true,\n    onActivateTick: false,\n    progressAnimation: 'decreasing',\n};\nconst TOAST_CONFIG = new InjectionToken('ToastConfig');\n\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n *\n * This is the only part of the portal core that directly touches the DOM.\n */\nclass DomPortalHost extends BasePortalHost {\n    _hostDomElement;\n    _componentFactoryResolver;\n    _appRef;\n    constructor(_hostDomElement, _componentFactoryResolver, _appRef) {\n        super();\n        this._hostDomElement = _hostDomElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     */\n    attachComponentPortal(portal, newestOnTop) {\n        const componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the ChangeDetector for that component to the application (which\n        // happens automatically when using a ViewContainer).\n        componentRef = componentFactory.create(portal.injector);\n        // When creating a component outside of a ViewContainer, we need to manually register\n        // its ChangeDetector with the application. This API is unfortunately not yet published\n        // in Angular core. The change detector must also be deregistered when the component\n        // is destroyed to prevent memory leaks.\n        this._appRef.attachView(componentRef.hostView);\n        this.setDisposeFn(() => {\n            this._appRef.detachView(componentRef.hostView);\n            componentRef.destroy();\n        });\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        if (newestOnTop) {\n            this._hostDomElement.insertBefore(this._getComponentRootNode(componentRef), this._hostDomElement.firstChild);\n        }\n        else {\n            this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n        }\n        return componentRef;\n    }\n    /** Gets the root HTMLElement for an instantiated component. */\n    _getComponentRootNode(componentRef) {\n        return componentRef.hostView.rootNodes[0];\n    }\n}\n\n/** Container inside which all toasts will render. */\nclass OverlayContainer {\n    _document = inject(DOCUMENT);\n    _containerElement;\n    ngOnDestroy() {\n        if (this._containerElement && this._containerElement.parentNode) {\n            this._containerElement.parentNode.removeChild(this._containerElement);\n        }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body\n     * and 'aria-live=\"polite\"'\n     */\n    _createContainer() {\n        const container = this._document.createElement('div');\n        container.classList.add('overlay-container');\n        container.setAttribute('aria-live', 'polite');\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: OverlayContainer, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: OverlayContainer, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: OverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    _portalHost;\n    constructor(_portalHost) {\n        this._portalHost = _portalHost;\n    }\n    attach(portal, newestOnTop = true) {\n        return this._portalHost.attach(portal, newestOnTop);\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns Resolves when the overlay has been detached.\n     */\n    detach() {\n        return this._portalHost.detach();\n    }\n}\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    _overlayContainer = inject(OverlayContainer);\n    _componentFactoryResolver = inject(ComponentFactoryResolver);\n    _appRef = inject(ApplicationRef);\n    _document = inject(DOCUMENT);\n    // Namespace panes by overlay container\n    _paneElements = new Map();\n    /**\n     * Creates an overlay.\n     * @returns A reference to the created overlay.\n     */\n    create(positionClass, overlayContainer) {\n        // get existing pane if possible\n        return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\n    }\n    getPaneElement(positionClass = '', overlayContainer) {\n        if (!this._paneElements.get(overlayContainer)) {\n            this._paneElements.set(overlayContainer, {});\n        }\n        if (!this._paneElements.get(overlayContainer)[positionClass]) {\n            this._paneElements.get(overlayContainer)[positionClass] = this._createPaneElement(positionClass, overlayContainer);\n        }\n        return this._paneElements.get(overlayContainer)[positionClass];\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(positionClass, overlayContainer) {\n        const pane = this._document.createElement('div');\n        pane.id = 'toast-container';\n        pane.classList.add(positionClass);\n        pane.classList.add('toast-container');\n        if (!overlayContainer) {\n            this._overlayContainer.getContainerElement().appendChild(pane);\n        }\n        else {\n            overlayContainer.getContainerElement().appendChild(pane);\n        }\n        return pane;\n    }\n    /**\n     * Create a DomPortalHost into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal host.\n     * @returns A portal host for the given DOM element.\n     */\n    _createPortalHost(pane) {\n        return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\n    }\n    /**\n     * Creates an OverlayRef for an overlay in the given DOM element.\n     * @param pane DOM element for the overlay\n     */\n    _createOverlayRef(pane) {\n        return new OverlayRef(this._createPortalHost(pane));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: Overlay, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: Overlay, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: Overlay, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\nclass ToastrService {\n    overlay;\n    _injector;\n    sanitizer;\n    ngZone;\n    toastrConfig;\n    currentlyActive = 0;\n    toasts = [];\n    overlayContainer;\n    previousToastMessage;\n    index = 0;\n    constructor(token, overlay, _injector, sanitizer, ngZone) {\n        this.overlay = overlay;\n        this._injector = _injector;\n        this.sanitizer = sanitizer;\n        this.ngZone = ngZone;\n        this.toastrConfig = {\n            ...token.default,\n            ...token.config,\n        };\n        if (token.config.iconClasses) {\n            this.toastrConfig.iconClasses = {\n                ...token.default.iconClasses,\n                ...token.config.iconClasses,\n            };\n        }\n    }\n    /** show toast */\n    show(message, title, override = {}, type = '') {\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show successful toast */\n    success(message, title, override = {}) {\n        const type = this.toastrConfig.iconClasses.success || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show error toast */\n    error(message, title, override = {}) {\n        const type = this.toastrConfig.iconClasses.error || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show info toast */\n    info(message, title, override = {}) {\n        const type = this.toastrConfig.iconClasses.info || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show warning toast */\n    warning(message, title, override = {}) {\n        const type = this.toastrConfig.iconClasses.warning || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /**\n     * Remove all or a single toast by id\n     */\n    clear(toastId) {\n        // Call every toastRef manualClose function\n        for (const toast of this.toasts) {\n            if (toastId !== undefined) {\n                if (toast.toastId === toastId) {\n                    toast.toastRef.manualClose();\n                    return;\n                }\n            }\n            else {\n                toast.toastRef.manualClose();\n            }\n        }\n    }\n    /**\n     * Remove and destroy a single toast by id\n     */\n    remove(toastId) {\n        const found = this._findToast(toastId);\n        if (!found) {\n            return false;\n        }\n        found.activeToast.toastRef.close();\n        this.toasts.splice(found.index, 1);\n        this.currentlyActive = this.currentlyActive - 1;\n        if (!this.toastrConfig.maxOpened || !this.toasts.length) {\n            return false;\n        }\n        if (this.currentlyActive < this.toastrConfig.maxOpened && this.toasts[this.currentlyActive]) {\n            const p = this.toasts[this.currentlyActive].toastRef;\n            if (!p.isInactive()) {\n                this.currentlyActive = this.currentlyActive + 1;\n                p.activate();\n            }\n        }\n        return true;\n    }\n    /**\n     * Determines if toast message is already shown\n     */\n    findDuplicate(title = '', message = '', resetOnDuplicate, countDuplicates) {\n        const { includeTitleDuplicates } = this.toastrConfig;\n        for (const toast of this.toasts) {\n            const hasDuplicateTitle = includeTitleDuplicates && toast.title === title;\n            if ((!includeTitleDuplicates || hasDuplicateTitle) && toast.message === message) {\n                toast.toastRef.onDuplicate(resetOnDuplicate, countDuplicates);\n                return toast;\n            }\n        }\n        return null;\n    }\n    /** create a clone of global config and apply individual settings */\n    applyConfig(override = {}) {\n        return { ...this.toastrConfig, ...override };\n    }\n    /**\n     * Find toast object by id\n     */\n    _findToast(toastId) {\n        for (let i = 0; i < this.toasts.length; i++) {\n            if (this.toasts[i].toastId === toastId) {\n                return { index: i, activeToast: this.toasts[i] };\n            }\n        }\n        return null;\n    }\n    /**\n     * Determines the need to run inside angular's zone then builds the toast\n     */\n    _preBuildNotification(toastType, message, title, config) {\n        if (config.onActivateTick) {\n            return this.ngZone.run(() => this._buildNotification(toastType, message, title, config));\n        }\n        return this._buildNotification(toastType, message, title, config);\n    }\n    /**\n     * Creates and attaches toast data to component\n     * returns the active toast, or in case preventDuplicates is enabled the original/non-duplicate active toast.\n     */\n    _buildNotification(toastType, message, title, config) {\n        if (!config.toastComponent) {\n            throw new Error('toastComponent required');\n        }\n        // max opened and auto dismiss = true\n        // if timeout = 0 resetting it would result in setting this.hideTime = Date.now(). Hence, we only want to reset timeout if there is\n        // a timeout at all\n        const duplicate = this.findDuplicate(title, message, this.toastrConfig.resetTimeoutOnDuplicate && config.timeOut > 0, this.toastrConfig.countDuplicates);\n        if (((this.toastrConfig.includeTitleDuplicates && title) || message) &&\n            this.toastrConfig.preventDuplicates &&\n            duplicate !== null) {\n            return duplicate;\n        }\n        this.previousToastMessage = message;\n        let keepInactive = false;\n        if (this.toastrConfig.maxOpened && this.currentlyActive >= this.toastrConfig.maxOpened) {\n            keepInactive = true;\n            if (this.toastrConfig.autoDismiss) {\n                this.clear(this.toasts[0].toastId);\n            }\n        }\n        const overlayRef = this.overlay.create(config.positionClass, this.overlayContainer);\n        this.index = this.index + 1;\n        let sanitizedMessage = message;\n        if (message && config.enableHtml) {\n            sanitizedMessage = this.sanitizer.sanitize(SecurityContext.HTML, message);\n        }\n        const toastRef = new ToastRef(overlayRef);\n        const toastPackage = new ToastPackage(this.index, config, sanitizedMessage, title, toastType, toastRef);\n        /** New injector that contains an instance of `ToastPackage`. */\n        const providers = [{ provide: ToastPackage, useValue: toastPackage }];\n        const toastInjector = Injector.create({ providers, parent: this._injector });\n        const component = new ComponentPortal(config.toastComponent, toastInjector);\n        const portal = overlayRef.attach(component, config.newestOnTop);\n        toastRef.componentInstance = portal.instance;\n        const ins = {\n            toastId: this.index,\n            title: title || '',\n            message: message || '',\n            toastRef,\n            onShown: toastRef.afterActivate(),\n            onHidden: toastRef.afterClosed(),\n            onTap: toastPackage.onTap(),\n            onAction: toastPackage.onAction(),\n            portal,\n        };\n        if (!keepInactive) {\n            this.currentlyActive = this.currentlyActive + 1;\n            setTimeout(() => {\n                ins.toastRef.activate();\n            });\n        }\n        this.toasts.push(ins);\n        return ins;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrService, deps: [{ token: TOAST_CONFIG }, { token: Overlay }, { token: i0.Injector }, { token: i2.DomSanitizer }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrService, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [TOAST_CONFIG]\n                }] }, { type: Overlay }, { type: i0.Injector }, { type: i2.DomSanitizer }, { type: i0.NgZone }] });\n\nclass Toast {\n    toastrService;\n    toastPackage;\n    ngZone;\n    message;\n    title;\n    options;\n    duplicatesCount;\n    originalTimeout;\n    /** width of progress bar */\n    width = signal(-1);\n    /** a combination of toast type and options.toastClass */\n    toastClasses = '';\n    state;\n    /** controls animation */\n    get _state() {\n        return this.state();\n    }\n    /** hides component when waiting to be displayed */\n    get displayStyle() {\n        if (this.state().value === 'inactive') {\n            return 'none';\n        }\n        return;\n    }\n    timeout;\n    intervalId;\n    hideTime;\n    sub;\n    sub1;\n    sub2;\n    sub3;\n    constructor(toastrService, toastPackage, ngZone) {\n        this.toastrService = toastrService;\n        this.toastPackage = toastPackage;\n        this.ngZone = ngZone;\n        this.message = toastPackage.message;\n        this.title = toastPackage.title;\n        this.options = toastPackage.config;\n        this.originalTimeout = toastPackage.config.timeOut;\n        this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n        this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n            this.activateToast();\n        });\n        this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n            this.remove();\n        });\n        this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n            this.resetTimeout();\n        });\n        this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n            this.duplicatesCount = count;\n        });\n        this.state = signal({\n            value: 'inactive',\n            params: {\n                easeTime: this.toastPackage.config.easeTime,\n                easing: 'ease-in',\n            },\n        });\n    }\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n        this.sub1.unsubscribe();\n        this.sub2.unsubscribe();\n        this.sub3.unsubscribe();\n        clearInterval(this.intervalId);\n        clearTimeout(this.timeout);\n    }\n    /**\n     * activates toast and sets timeout\n     */\n    activateToast() {\n        this.state.update(state => ({ ...state, value: 'active' }));\n        if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') &&\n            this.options.timeOut) {\n            this.outsideTimeout(() => this.remove(), this.options.timeOut);\n            this.hideTime = new Date().getTime() + this.options.timeOut;\n            if (this.options.progressBar) {\n                this.outsideInterval(() => this.updateProgress(), 10);\n            }\n        }\n    }\n    /**\n     * updates progress bar width\n     */\n    updateProgress() {\n        if (this.width() === 0 || this.width() === 100 || !this.options.timeOut) {\n            return;\n        }\n        const now = new Date().getTime();\n        const remaining = this.hideTime - now;\n        this.width.set((remaining / this.options.timeOut) * 100);\n        if (this.options.progressAnimation === 'increasing') {\n            this.width.update(width => 100 - width);\n        }\n        if (this.width() <= 0) {\n            this.width.set(0);\n        }\n        if (this.width() >= 100) {\n            this.width.set(100);\n        }\n    }\n    resetTimeout() {\n        clearTimeout(this.timeout);\n        clearInterval(this.intervalId);\n        this.state.update(state => ({ ...state, value: 'active' }));\n        this.outsideTimeout(() => this.remove(), this.originalTimeout);\n        this.options.timeOut = this.originalTimeout;\n        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n        this.width.set(-1);\n        if (this.options.progressBar) {\n            this.outsideInterval(() => this.updateProgress(), 10);\n        }\n    }\n    /**\n     * tells toastrService to remove this toast after animation time\n     */\n    remove() {\n        if (this.state().value === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.state.update(state => ({ ...state, value: 'removed' }));\n        this.outsideTimeout(() => this.toastrService.remove(this.toastPackage.toastId), +this.toastPackage.config.easeTime);\n    }\n    tapToast() {\n        if (this.state().value === 'removed') {\n            return;\n        }\n        this.toastPackage.triggerTap();\n        if (this.options.tapToDismiss) {\n            this.remove();\n        }\n    }\n    stickAround() {\n        if (this.state().value === 'removed') {\n            return;\n        }\n        if (this.options.disableTimeOut !== 'extendedTimeOut') {\n            clearTimeout(this.timeout);\n            this.options.timeOut = 0;\n            this.hideTime = 0;\n            // disable progressBar\n            clearInterval(this.intervalId);\n            this.width.set(0);\n        }\n    }\n    delayedHideToast() {\n        if ((this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n            this.options.extendedTimeOut === 0 ||\n            this.state().value === 'removed') {\n            return;\n        }\n        this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);\n        this.options.timeOut = this.options.extendedTimeOut;\n        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n        this.width.set(-1);\n        if (this.options.progressBar) {\n            this.outsideInterval(() => this.updateProgress(), 10);\n        }\n    }\n    outsideTimeout(func, timeout) {\n        if (this.ngZone) {\n            this.ngZone.runOutsideAngular(() => (this.timeout = setTimeout(() => this.runInsideAngular(func), timeout)));\n        }\n        else {\n            this.timeout = setTimeout(() => func(), timeout);\n        }\n    }\n    outsideInterval(func, timeout) {\n        if (this.ngZone) {\n            this.ngZone.runOutsideAngular(() => (this.intervalId = setInterval(() => this.runInsideAngular(func), timeout)));\n        }\n        else {\n            this.intervalId = setInterval(() => func(), timeout);\n        }\n    }\n    runInsideAngular(func) {\n        if (this.ngZone) {\n            this.ngZone.run(() => func());\n        }\n        else {\n            func();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: Toast, deps: [{ token: ToastrService }, { token: ToastPackage }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.0.0\", type: Toast, isStandalone: true, selector: \"[toast-component]\", host: { listeners: { \"click\": \"tapToast()\", \"mouseenter\": \"stickAround()\", \"mouseleave\": \"delayedHideToast()\" }, properties: { \"class\": \"this.toastClasses\", \"@flyInOut\": \"this._state\", \"style.display\": \"this.displayStyle\" } }, ngImport: i0, template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width() + '%'\"></div>\n  </div>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [\n            trigger('flyInOut', [\n                state('inactive', style({ opacity: 0 })),\n                state('active', style({ opacity: 1 })),\n                state('removed', style({ opacity: 0 })),\n                transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')),\n                transition('active => removed', animate('{{ easeTime }}ms {{ easing }}')),\n            ]),\n        ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: Toast, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[toast-component]',\n                    template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width() + '%'\"></div>\n  </div>\n  `,\n                    animations: [\n                        trigger('flyInOut', [\n                            state('inactive', style({ opacity: 0 })),\n                            state('active', style({ opacity: 1 })),\n                            state('removed', style({ opacity: 0 })),\n                            transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')),\n                            transition('active => removed', animate('{{ easeTime }}ms {{ easing }}')),\n                        ]),\n                    ],\n                    preserveWhitespaces: false,\n                    standalone: true,\n                    imports: [NgIf],\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: () => [{ type: ToastrService }, { type: ToastPackage }, { type: i0.NgZone }], propDecorators: { toastClasses: [{\n                type: HostBinding,\n                args: ['class']\n            }], _state: [{\n                type: HostBinding,\n                args: ['@flyInOut']\n            }], displayStyle: [{\n                type: HostBinding,\n                args: ['style.display']\n            }], tapToast: [{\n                type: HostListener,\n                args: ['click']\n            }], stickAround: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], delayedHideToast: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nconst DefaultGlobalConfig = {\n    ...DefaultNoComponentGlobalConfig,\n    toastComponent: Toast,\n};\n/**\n * @description\n * Provides the `TOAST_CONFIG` token with the given config.\n *\n * @param config The config to configure toastr.\n * @returns The environment providers.\n *\n * @example\n * ```ts\n * import { provideToastr } from 'ngx-toastr';\n *\n * bootstrap(AppComponent, {\n *   providers: [\n *     provideToastr({\n *       timeOut: 2000,\n *       positionClass: 'toast-top-right',\n *     }),\n *   ],\n * })\n */\nconst provideToastr = (config = {}) => {\n    const providers = [\n        {\n            provide: TOAST_CONFIG,\n            useValue: {\n                default: DefaultGlobalConfig,\n                config,\n            }\n        }\n    ];\n    return makeEnvironmentProviders(providers);\n};\n\nclass ToastrModule {\n    static forRoot(config = {}) {\n        return {\n            ngModule: ToastrModule,\n            providers: [provideToastr(config)],\n        };\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrModule, imports: [Toast], exports: [Toast] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [Toast],\n                    exports: [Toast],\n                }]\n        }] });\nclass ToastrComponentlessModule {\n    static forRoot(config = {}) {\n        return {\n            ngModule: ToastrModule,\n            providers: [\n                {\n                    provide: TOAST_CONFIG,\n                    useValue: {\n                        default: DefaultNoComponentGlobalConfig,\n                        config,\n                    },\n                },\n            ],\n        };\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrComponentlessModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrComponentlessModule });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrComponentlessModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastrComponentlessModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }] });\n\nclass ToastNoAnimation {\n    toastrService;\n    toastPackage;\n    appRef;\n    message;\n    title;\n    options;\n    duplicatesCount;\n    originalTimeout;\n    /** width of progress bar */\n    width = signal(-1);\n    /** a combination of toast type and options.toastClass */\n    toastClasses = '';\n    /** hides component when waiting to be displayed */\n    get displayStyle() {\n        if (this.state() === 'inactive') {\n            return 'none';\n        }\n        return null;\n    }\n    /** controls animation */\n    state = signal('inactive');\n    timeout;\n    intervalId;\n    hideTime;\n    sub;\n    sub1;\n    sub2;\n    sub3;\n    constructor(toastrService, toastPackage, appRef) {\n        this.toastrService = toastrService;\n        this.toastPackage = toastPackage;\n        this.appRef = appRef;\n        this.message = toastPackage.message;\n        this.title = toastPackage.title;\n        this.options = toastPackage.config;\n        this.originalTimeout = toastPackage.config.timeOut;\n        this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n        this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n            this.activateToast();\n        });\n        this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n            this.remove();\n        });\n        this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n            this.resetTimeout();\n        });\n        this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n            this.duplicatesCount = count;\n        });\n    }\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n        this.sub1.unsubscribe();\n        this.sub2.unsubscribe();\n        this.sub3.unsubscribe();\n        clearInterval(this.intervalId);\n        clearTimeout(this.timeout);\n    }\n    /**\n     * activates toast and sets timeout\n     */\n    activateToast() {\n        this.state.set('active');\n        if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n            this.timeout = setTimeout(() => {\n                this.remove();\n            }, this.options.timeOut);\n            this.hideTime = new Date().getTime() + this.options.timeOut;\n            if (this.options.progressBar) {\n                this.intervalId = setInterval(() => this.updateProgress(), 10);\n            }\n        }\n        if (this.options.onActivateTick) {\n            this.appRef.tick();\n        }\n    }\n    /**\n     * updates progress bar width\n     */\n    updateProgress() {\n        if (this.width() === 0 || this.width() === 100 || !this.options.timeOut) {\n            return;\n        }\n        const now = new Date().getTime();\n        const remaining = this.hideTime - now;\n        this.width.set((remaining / this.options.timeOut) * 100);\n        if (this.options.progressAnimation === 'increasing') {\n            this.width.update(width => 100 - width);\n        }\n        if (this.width() <= 0) {\n            this.width.set(0);\n        }\n        if (this.width() >= 100) {\n            this.width.set(100);\n        }\n    }\n    resetTimeout() {\n        clearTimeout(this.timeout);\n        clearInterval(this.intervalId);\n        this.state.set('active');\n        this.options.timeOut = this.originalTimeout;\n        this.timeout = setTimeout(() => this.remove(), this.originalTimeout);\n        this.hideTime = new Date().getTime() + (this.originalTimeout || 0);\n        this.width.set(-1);\n        if (this.options.progressBar) {\n            this.intervalId = setInterval(() => this.updateProgress(), 10);\n        }\n    }\n    /**\n     * tells toastrService to remove this toast after animation time\n     */\n    remove() {\n        if (this.state() === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.state.set('removed');\n        this.timeout = setTimeout(() => this.toastrService.remove(this.toastPackage.toastId));\n    }\n    tapToast() {\n        if (this.state() === 'removed') {\n            return;\n        }\n        this.toastPackage.triggerTap();\n        if (this.options.tapToDismiss) {\n            this.remove();\n        }\n    }\n    stickAround() {\n        if (this.state() === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.options.timeOut = 0;\n        this.hideTime = 0;\n        // disable progressBar\n        clearInterval(this.intervalId);\n        this.width.set(0);\n    }\n    delayedHideToast() {\n        if ((this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n            this.options.extendedTimeOut === 0 ||\n            this.state() === 'removed') {\n            return;\n        }\n        this.timeout = setTimeout(() => this.remove(), this.options.extendedTimeOut);\n        this.options.timeOut = this.options.extendedTimeOut;\n        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n        this.width.set(-1);\n        if (this.options.progressBar) {\n            this.intervalId = setInterval(() => this.updateProgress(), 10);\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastNoAnimation, deps: [{ token: ToastrService }, { token: ToastPackage }, { token: i0.ApplicationRef }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.0.0\", type: ToastNoAnimation, isStandalone: true, selector: \"[toast-component]\", host: { listeners: { \"click\": \"tapToast()\", \"mouseenter\": \"stickAround()\", \"mouseleave\": \"delayedHideToast()\" }, properties: { \"class\": \"this.toastClasses\", \"style.display\": \"this.displayStyle\" } }, ngImport: i0, template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width() + '%'\"></div>\n  </div>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastNoAnimation, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[toast-component]',\n                    template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width() + '%'\"></div>\n  </div>\n  `,\n                    standalone: true,\n                    imports: [NgIf],\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                }]\n        }], ctorParameters: () => [{ type: ToastrService }, { type: ToastPackage }, { type: i0.ApplicationRef }], propDecorators: { toastClasses: [{\n                type: HostBinding,\n                args: ['class']\n            }], displayStyle: [{\n                type: HostBinding,\n                args: ['style.display']\n            }], tapToast: [{\n                type: HostListener,\n                args: ['click']\n            }], stickAround: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], delayedHideToast: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\nconst DefaultNoAnimationsGlobalConfig = {\n    ...DefaultNoComponentGlobalConfig,\n    toastComponent: ToastNoAnimation,\n};\nclass ToastNoAnimationModule {\n    static forRoot(config = {}) {\n        return {\n            ngModule: ToastNoAnimationModule,\n            providers: [\n                {\n                    provide: TOAST_CONFIG,\n                    useValue: {\n                        default: DefaultNoAnimationsGlobalConfig,\n                        config,\n                    },\n                },\n            ],\n        };\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastNoAnimationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastNoAnimationModule, imports: [ToastNoAnimation], exports: [ToastNoAnimation] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastNoAnimationModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: ToastNoAnimationModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ToastNoAnimation],\n                    exports: [ToastNoAnimation],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, ComponentPortal, DefaultGlobalConfig, DefaultNoAnimationsGlobalConfig, DefaultNoComponentGlobalConfig, Overlay, OverlayContainer, OverlayRef, TOAST_CONFIG, Toast, ToastContainerDirective, ToastNoAnimation, ToastNoAnimationModule, ToastPackage, ToastRef, ToastrComponentlessModule, ToastrModule, ToastrService, provideToastr };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}